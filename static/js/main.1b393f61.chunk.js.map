{"version":3,"sources":["components/NewTodo/NewTodo.js","components/TodoItem/TodoItem.js","components/FilterItem/FilterItem.js","components/Footer/Footer.js","App.js","index.js"],"names":["NewTodo","state","inputNewTodoValue","addTodo","event","addTodoToData","_this","props","preventDefault","setState","onChangeInputNewTodo","_ref","value","target","this","react_default","a","createElement","onSubmit","onChange","type","className","placeholder","autoFocus","React","Component","TodoItem","isTodoEditing","todo","title","editTodoId","showTodoEditForm","onChangeInputEditTodo","_ref$target","todoId","dataset","onKeyPressed","key","editTodo","_this$state","editTodoInData","_this$props","_this$props$todo","id","completed","deleteTodoFromData","changeTodoCompleteStatus","_this$state2","itemClass","createClass","data-todo-id","concat","checked","onBlur","onKeyDown","Fragment","htmlFor","onClick","onDoubleClick","FilterItem","href","dataFilter","anchor","filter","linkOfFilterClass","selected","data-filter","Footer","activeTodosLeft","changeFilter","isSomeTodoCompleted","deleteAllCompletedTodoFromData","components_FilterItem_FilterItem","App","todos","JSON","parse","localStorage","getItem","filteredTodos","idCount","isAllTodosCompleted","filterTodos","prevState","newFilteredTodos","Object","toConsumableArray","checkIsAllTodosCompleted","every","map","Number","_objectSpread","indexTodoInArray","findIndex","tempTodos","splice","reduce","acc","changeTodosCompleteStatus","countActiveTodos","length","findSomeCompletedTodo","some","prevProps","setItem","stringify","_this2","components_NewTodo_NewTodo","components_TodoItem_TodoItem","components_Footer_Footer","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.1b393f61.chunk.js","sourcesContent":["import React from 'react';\n\nclass NewTodo extends React.Component {\n  state = {\n    inputNewTodoValue: '',\n  }\n\n  addTodo = (event) => {\n    const { addTodoToData } = this.props;\n    const { inputNewTodoValue } = this.state;\n\n    event.preventDefault();\n    \n    if (inputNewTodoValue) {\n      addTodoToData(inputNewTodoValue);\n      this.setState({\n        inputNewTodoValue: '',\n      });\n    }\n  }\n\n  onChangeInputNewTodo = ({ target: { value } }) => {\n    this.setState({\n      inputNewTodoValue: value,\n    });\n  }\n\n  render() {\n    const { inputNewTodoValue } = this.state;\n\n\n    return (\n      <form onSubmit={this.addTodo}>\n        <input\n          value={inputNewTodoValue}\n          onChange={this.onChangeInputNewTodo}\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          autoFocus\n        />\n      </form>\n    );\n  }\n}\n\nexport default NewTodo;\n","import React from 'react';\nimport createClass from 'classnames';\n\nclass TodoItem extends React.Component {\n  state = {\n    isTodoEditing: false,\n    inputNewTodoValue: this.props.todo.title,\n    editTodoId: null,\n  }\n\n  showTodoEditForm = () => {\n    this.setState({\n      isTodoEditing: true,\n    });\n  }\n\n  onChangeInputEditTodo = ({\n    target: {\n      value,\n      dataset: {\n        todoId,\n      }\n    }\n  }) => {\n    this.setState({\n      inputNewTodoValue: value,\n      editTodoId: todoId,\n    });\n  }\n\n  onKeyPressed = (event) => {\n    if (event.key === \"Escape\" || event.key === \"Esc\") {\n      this.editTodo(event);\n    }\n  }\n\n  editTodo = (event) => {\n    event.preventDefault();\n    const { inputNewTodoValue, editTodoId } = this.state;\n\n    if (editTodoId) {\n      this.props.editTodoInData(editTodoId, inputNewTodoValue);\n    }\n\n    this.setState({\n      isTodoEditing: false,\n      editTodoId: null,\n    });\n  }\n\n  render() {\n    const {\n      todo: {\n        id,\n        title,\n        completed\n      },\n      deleteTodoFromData,\n      changeTodoCompleteStatus\n    } = this.props;\n\n    const { isTodoEditing, inputNewTodoValue } = this.state;\n    const itemClass = createClass({ 'completed': completed });\n\n    return (\n      <li className={itemClass}>\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            data-todo-id={`${id}`}\n            id={`todo-${id}`}\n            checked={completed}\n            onChange={changeTodoCompleteStatus}\n          />\n          {isTodoEditing\n            ?\n            <form onSubmit={this.editTodo}>\n              <input\n                type=\"text\"\n                className=\"new-todo\"\n                data-todo-id={`${id}`}\n                value={inputNewTodoValue}\n                onChange={this.onChangeInputEditTodo}\n                onBlur={this.editTodo}\n                onKeyDown={this.onKeyPressed}\n                autoFocus\n              />\n            </form>\n            :\n            <>\n              <label\n                htmlFor={`todo-${id}`}\n                onClick={(event) => event.preventDefault()}\n                onDoubleClick={this.showTodoEditForm}\n              >\n                {title}\n              </label>\n              <button\n                type=\"button\"\n                className=\"destroy\"\n                data-todo-id={`${id}`}\n                onClick={() => deleteTodoFromData(id)}\n              />\n            </>\n          }\n        </div>\n      </li>\n    );\n  }\n}\n\nexport default TodoItem;\n","import React from 'react';\nimport createClass from 'classnames';\n\nconst FilterItem = ({\n  href,\n  dataFilter,\n  onClick,\n  anchor,\n  filter\n}) => {\n  const linkOfFilterClass = createClass(\n    { 'selected': dataFilter === filter }\n  );\n\n  return (\n    <li>\n      <a\n        href={href}\n        data-filter={dataFilter}\n        className={linkOfFilterClass}\n        onClick={onClick}\n      >\n        {anchor}\n      </a>\n    </li>\n  );\n}\n\nexport default FilterItem;\n","import React from 'react';\nimport FilterItem from '../FilterItem/FilterItem';\n\nconst Footer = ({\n  activeTodosLeft,\n  changeFilter,\n  filter,\n  isSomeTodoCompleted,\n  deleteAllCompletedTodoFromData\n}) => (\n  <footer className=\"footer\">\n    {!!activeTodosLeft &&\n      <span className=\"todo-count\">\n        {`${activeTodosLeft} item left`}\n      </span>\n    }\n\n    <ul className=\"filters\">\n      <FilterItem\n        href=\"#/\"\n        dataFilter=\"all\"\n        onClick={changeFilter}\n        anchor=\"All\"\n        filter={filter}\n      />\n\n      <FilterItem\n        href=\"#/active\"\n        dataFilter=\"active\"\n        onClick={changeFilter}\n        anchor=\"Active\"\n        filter={filter}\n      />\n\n      <FilterItem\n        href=\"#/completed\"\n        dataFilter=\"completed\"\n        onClick={changeFilter}\n        anchor=\"Completed\"\n        filter={filter}\n      />\n    </ul>\n    {isSomeTodoCompleted &&\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={deleteAllCompletedTodoFromData}\n      >\n        Clear completed\n      </button>\n    }\n  </footer>\n);\n\nexport default Footer;\n","import React from 'react';\n\nimport NewTodo from './components/NewTodo/NewTodo';\nimport TodoItem from './components/TodoItem/TodoItem';\nimport Footer from './components/Footer/Footer';\n\nclass App extends React.Component {\n  state = {\n    todos: JSON.parse(localStorage.getItem('todos')) || [],\n    filteredTodos: JSON.parse(localStorage.getItem('todos')) || [],\n    idCount: JSON.parse(localStorage.getItem('idCount')) || 0,\n    filter: 'all',\n    isAllTodosCompleted: false,\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    localStorage.setItem('todos', JSON.stringify(this.state.todos));\n    localStorage.setItem('idCount', JSON.stringify(this.state.idCount));\n  }\n\n  changeFilter = (event) => {\n    const {\n      target: {\n        dataset: {\n          filter,\n        }\n      }\n    } = event;\n\n    event.preventDefault();\n\n    this.setState({\n      filter: filter,\n    });\n\n    this.filterTodos();\n  }\n\n  filterTodos = () => {\n    this.setState(prevState => {\n      let newFilteredTodos = [];\n      const { filter, todos } = prevState;\n\n      switch (filter) {\n        case 'active':\n          newFilteredTodos = todos.filter(todo => (\n            todo.completed === false\n          ));\n          break;\n        case 'completed':\n          newFilteredTodos = todos.filter(todo => (\n            todo.completed === true\n          ));\n          break;\n        default:\n          newFilteredTodos = todos;\n      }\n\n      return ({\n        filteredTodos: newFilteredTodos,\n      });\n    });\n  }\n\n  addTodoToData = (inputNewTodoValue) => {\n    this.setState(prevState => ({\n      todos: [\n        ...prevState.todos,\n        {\n          id: prevState.idCount + 1,\n          title: inputNewTodoValue,\n          completed: false,\n        },\n      ],\n\n      idCount: ++prevState.idCount,\n    }));\n\n    this.checkIsAllTodosCompleted();\n    this.filterTodos();\n  }\n\n  checkIsAllTodosCompleted = () => {\n    this.setState(prevState => ({\n      isAllTodosCompleted: prevState.todos.every(todo => (\n        todo.completed === true\n      )),\n    }));\n  }\n\n  editTodoInData = (id, value) => {\n    if (!value) {\n      this.deleteTodoFromData(id);\n      return;\n    }\n\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => {\n        if (todo.id === Number(id)) {\n          return ({\n            ...todo,\n            title: value,\n          });\n        }\n\n        return todo;\n      }),\n    }));\n    this.filterTodos();\n  }\n\n  deleteTodoFromData = (todoId) => {\n    this.setState(prevState => {\n      const indexTodoInArray = prevState.todos.findIndex(todo => (\n        todo.id === Number(todoId)\n      ));\n      let tempTodos = [...prevState.todos];\n      \n      tempTodos.splice(indexTodoInArray, 1);\n\n      return ({\n        todos: tempTodos,\n      });\n    });\n\n    this.checkIsAllTodosCompleted();\n    this.filterTodos();\n  }\n\n  deleteAllCompletedTodoFromData = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.reduce((acc, todo) => {\n        if (todo.completed === true) {\n          return [...acc];\n        }\n\n        return [...acc, todo,];\n      }, []),\n\n      isAllTodosCompleted: false,\n    }));\n    this.filterTodos();\n  }\n\n  changeTodoCompleteStatus = ({\n    target: {\n      dataset: {\n        todoId,\n      }\n    }\n  }) => {\n    this.setState(prevState => {\n      return ({\n        ...prevState,\n        todos: [...prevState.todos].reduce((acc, todo) => {\n          if (todo.id === Number(todoId)) {\n            todo.completed = !(todo.completed);\n          }\n          return ([\n            ...acc,\n            todo,\n          ]);\n        }, []),\n      });\n    });\n\n    this.checkIsAllTodosCompleted();\n    this.filterTodos();\n  }\n\n  changeTodosCompleteStatus = () => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos].map(todo => ({\n        ...todo,\n        completed: !(prevState.isAllTodosCompleted)\n      })),\n      isAllTodosCompleted: !(prevState.isAllTodosCompleted),\n    }));\n\n    this.filterTodos();\n  }\n\n  countActiveTodos = () => {\n    const { todos } = this.state;\n\n    return todos.filter(todo => (\n      todo.completed === false\n    ))\n      .length;\n  }\n\n  findSomeCompletedTodo = () => {\n    const { todos } = this.state;\n\n    return todos.some(todo => (\n      todo.completed === true\n    ));\n  }\n\n  render() {\n    const {\n      filteredTodos,\n      filter,\n      todos,\n      isAllTodosCompleted\n    } = this.state;\n\n    const activeTodosLeft = this.countActiveTodos();\n    const isSomeTodoCompleted = this.findSomeCompletedTodo();\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTodo addTodoToData={this.addTodoToData} />\n        </header>\n        <section className=\"main\">\n          {!!(todos.length) &&\n            <>\n              <input\n                type=\"checkbox\"\n                id=\"toggle-all\"\n                className=\"toggle-all\"\n                onChange={this.changeTodosCompleteStatus}\n                checked={isAllTodosCompleted}\n              />\n              <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            </>\n          }\n          <ul className=\"todo-list\">\n            {filteredTodos.map(todo => (\n              <TodoItem\n                todo={todo}\n                deleteTodoFromData={this.deleteTodoFromData}\n                changeTodoCompleteStatus={this.changeTodoCompleteStatus}\n                editTodoInData={this.editTodoInData}\n                key={todo.id} />\n            ))}\n          </ul>\n        </section>\n\n        {!!(todos.length) &&\n          <Footer\n            activeTodosLeft={activeTodosLeft}\n            changeFilter={this.changeFilter}\n            filter={filter}\n            isSomeTodoCompleted={isSomeTodoCompleted}\n            deleteAllCompletedTodoFromData={this.deleteAllCompletedTodoFromData}\n          />\n        }\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}